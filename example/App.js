/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {Component} from 'react';
import {StyleSheet, Text, View, Alert} from 'react-native';
import {
  connect,
  publish,
  onError,
  subscribe,
  onMessageFound,
  onMessageLost,
  checkBluetoothPermission,
  unsubscribe,
  unpublish,
} from 'react-native-google-nearby-messages';


export default class App extends Component {
  state = {
    status: 'starting',
    message: '--',
  };
  listeners = [];

  componentDidMount() {
    this.listeners.push(
      onError((k, m) => {
        console.error(`${k}: ${m}`);
        Alert.alert('Error!', `${k}: ${m}`);
      }),
    );
    Alert.alert(
      'who u wanna be',
      'Do you want to publish a message or subscribe to messages?',
      [
        {
          text: 'Subscriber',
          onPress: () => {
            this.subscribe();
          },
        },
        {
          text: 'Publisher',
          onPress: () => {
            this.publish();
          },
        },
        {
          text: 'Only check Bluetooth Permission',
          onPress: async () => {
            const result = await checkBluetoothPermission();
            Alert.alert('Bluetooth Permissions:', `Granted: ${result}`);
          },
        },
      ],
    );

    setTimeout(() => {
      this.componentWillUnmount();
    }, 5000);
  }

  componentWillUnmount() {
    console.log('unpublishing...');
    unpublish();
    console.log('unsubscribing...');
    unsubscribe();
    this.listeners.forEach((l) => {
      console.log(`unsubscribing listener ${l}`);
      if (l) {
        l();
      }
    });
  }

  async publish() {
    await connect(API_KEY);
    await publish('TEST');
    this.setState({
      status: 'Published!',
    });
  }

  async subscribe() {
    await connect(API_KEY);
    this.listeners.push(
      onMessageFound((m) => {
        this.setState({
          message: `Found: ${JSON.stringify(m)}`,
        });
      }),
    );
    this.listeners.push(
      onMessageLost((m) => {
        this.setState({
          message: `Lost: ${JSON.stringify(m)}`,
        });
      }),
    );
    await subscribe();
    this.setState({
      status: 'Subscribed!',
    });
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆GoogleNearbyMessages example☆</Text>
        <Text style={styles.instructions}>STATUS: {this.state.status}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK MESSAGE☆</Text>
        <Text style={styles.instructions}>{this.state.message}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
